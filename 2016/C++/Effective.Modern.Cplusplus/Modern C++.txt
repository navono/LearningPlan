Modern C++

/////////////////////////////////////////////////////////////////////////////////////////
Item 23：

形参永远都是lvalue！！！！

template<typename T> // in namespace std
typename remove_reference<T>::type&&
move(T&& param)
{
using ReturnType = // alias declaration;
typename remove_reference<T>::type&&; // see Item 9
return static_cast<ReturnType>(param);
}

template<typename T> // C++14; still in
decltype(auto) move(T&& param) // namespace std
{
using ReturnType = remove_reference_t<T>&&;
return static_cast<ReturnType>(param);
}

std::move unconditionally casts its argument to an rvalue, std::forward does it
only under certain conditions. std::forward is a conditional cast.
std::move的转化是无条件的转化到rvalue，而使用std::forward是在条件满足情况下才
转化到rvalue（实参为rvalue。当实参为lvalue，则产生lvalue。所以才叫forward，
它所转化的对象依旧保持原有的lvalueness或rvalueness）

the use of std::move conveys an unconditional cast to an rvalue,
while the use of std::forward indicates a cast to an rvalue only for references to
which rvalues have been bound

There are two lessons to be drawn from this example.
First, don’t declare objects const if you want to be able to move from them.
Move requests on const objects are silently transformed into copy operations.
第一，如果想要对象能够被“移动”，那么就不要将对象声明为const，在具有const的对象上
进行“移动”操作会静默转换到拷贝构造操作上

Second, std::move not only doesn’t actually move anything,
it doesn’t even guarantee that the object it’s casting will be eligible to be moved.
The only thing you know for sure about the result of applying
std::move to an object is that it’s an rvalue.
第二：std::move实际上什么也没有“移动”，甚至都不保证它转化的对象有资格被“移动”。
唯一能确保的就是在对象上使用std::move会产生一个rvalue。

Neither std::move nor std::forward do anything at runtime.

/////////////////////////////////////////////////////////////////////////////////////////
Item 24：

universal reference有两种形式：
1.最普通常见的形式，函数模板参数
2.auto&&

T&& param、auto&& param（或const T&& param）
param是Universal reference（forwardding reference）必须满足以下几点：
1.param的类型必须是要推导的，否则就是rvalue reference
2.param的类型格式必须满足T&&

因为universal reference是引用，所以必须被初始化，它的初始化类型确定了
最终的类型是rvalue reference还是lvalue reference。
当实参是lvalue时，universal reference相对应就是lvalue reference
当实参是rvalue时，universal reference相对应就是rvalue reference

universal reference的根本最终在于reference collapsing

/////////////////////////////////////////////////////////////////////////////////////////

Item 25：Use std::move on rvalue reference, std::forward on universal reference

在返回一个局部变量到返回类型为Value的函数时，编译器会自动进行RVO，不需要进行std::move

当编译器进行RVO时，有两个条件：
1.局部变量的类型和函数返回值的类型一致
2.返回的值就是上述1构造的局部变量

有资格进行RVO的局部变量包括大部分局部变量，包括return返回的临时对象，
但是不包括函数形参

当使用std::move(obj)时，编译器不会使用RVO而消除“移动”有以下两点原因：
1.编译器不会再一次在内存中为函数返回值分配内存用来构造obj
2.RVO的契约规定，编译器只有在返回值是局部变量的情况下才执行RVO

而std::move(obj)的返回值是一个指向obj的引用

RVO还有一条规定：
执行RVO的条件满足，但是编译器未选择执行拷贝消除(copy elision)，
返回的对象必须视为一个rvalue。
例如：
Widget makeWidget()
{
    Widget w;
	...
	return w;
}

编译器要不选择消除w的拷贝动作，要不选择将函数和下面代码
同等对待
Widget makeWidget()
{
    Widget w;
	...
	return std::(w);	// treat w as rvalue, because
						// no copy elision was performed
}

最后一次使用对象时，可对rvalue reference使用std::move，对universal reference
使用std::forward

对于return by value的函数，返回时，可对rvalue reference和universal reference运用上述规则


/////////////////////////////////////////////////////////////////////////////////////////

Item 7：

{} 可以避免构造与函数声明问题，同时能防止构造与函数声明的解析歧义(vexing parse)。
但是{}对于一些STL容器来说，却是可能会导致实际目的与预料目的不一致。
比如vector vec{10,0}与vector vec(10,0).

{}会强制使用实现了std::initializer_list的构造方法


/////////////////////////////////////////////////////////////////////////////////////////


Item 1: Understand template type deduction

比如有:
template<typename T>
void f(ParamType param);

如果调用f(expr);
在编译期间，编译期使用expr推导两个类型：一个是为T，另一个是为ParamType。

一般情况下，T的类型与函数的实参类型一致。但并不总是如此。有以下三种情况：
.ParamType是一个指针或引用类型，但不是统一引用(universal reference)
.ParamType是统一引用
.ParamType既不是指针，也不是引用

场景1：(ParamType是一个指针或引用类型，但不是统一引用(universal reference))
template<typename T>
void f(T& param); // param is a reference

1.如果expr是引用类型，忽略引用属性
2.expr的类型结合ParamType的模式匹配，决定了T的类型。
  （也就是expr去除了引用属性后，结合ParamType的类型，决定T类型）

例如：  
int x = 27; // x is an int
const int cx = x; // cx is a const int
const int& rx = x; // rx is a reference to x as a const int
the deduced types for param and T in various calls are as follows:

f(x); // T is int, param's type is int&
f(cx); // T is const int,
		// param's type is const int&
f(rx); // T is const int,
		// param's type is const int&

再例如：
template<typename T>
void f(const T& param); // param is now a ref-to-const
int x = 27; // as before
const int cx = x; // as before
const int& rx = x; // as before

f(x); // T is int, param's type is const int&
f(cx); // T is int, param's type is const int&
f(rx); // T is int, param's type is const int&

因为const是ParamType的一部分，所以T不再拥有const属性。

ParamType是指针类型也一样：

template<typename T>
void f(T* param); // param is now a pointer
int x = 27; // as before
const int *px = &x; // px is a ptr to x as a const int

f(&x); // T is int, param's type is int*
f(px); // T is const int,
	// param's type is const int*


场景2：(ParamType是统一引用)
1.假如expr是个左值，T和ParamType都被推导为左值引用。这里有两个地方不同寻常，
  第一，这是唯一一种场景下模板类型推导把T推导成一个引用。
  第二，尽管ParamType是使用了右值引用的语法来声明的，它的推导类型却是一个左值引用。
2.假如expr是个右值，通用规则（就是场景1）被采用。	


template<typename T>
void f(T&& param); // param is now a universal reference
int x = 27; // as before
const int cx = x; // as before
const int& rx = x; // as before
f(x); // x is lvalue, so T is int&,
		// param's type is also int&
f(cx); // cx is lvalue, so T is const int&,
		// param's type is also const int&
f(rx); // rx is lvalue, so T is const int&,
		// param's type is also const int&
f(27); // 27 is rvalue, so T is int,
		// param's type is therefore int&&


场景3：(ParamType既不是指针，也不是引用)
template<typename T>
void f(T param); // param is now passed by value

因为场景3就是传入一个拷贝，所以param是一个全新的对象。
1.如之前一样，如果expr的类型是个引用，则引用部分被忽略。
2.假如忽略了引用部分后，expr是一个const，也忽略之。
  如果expr是个volatile，也忽略之。(volatitle对象不常用，它们仅仅使用在实现设备驱动时。详见条款40)

int x = 27; // as before
const int cx = x; // as before
const int& rx = x; // as before
f(x); // T's and param's types are both int
f(cx); // T's and param's types are again both int
f(rx); // T's and param's types are still both int


认识到const（以及volatile）仅仅在传值时可以被忽略这一点是很重要的。就如我们之前看到的，
在引用传递或指针传递时，expr的const特性在类型推导时被保留了。


但是我们考虑下，当expr是一个指向常量对象的常量指针时，expr按照传值方式传递给param：

template<typename T>
void f(T param);               // param is still passed by value


const char* const ptr =    // ptr is const pointer to const object
    "Fun with pointers";


f(ptr);                      // pass arg of type const char * const

这里，星号右边的const声明ptr是个const指针：ptr不能指向别的位置，也不能置空
(星号左边的const指明ptr指向的内容，也就是字符串是const的，不能被修改)。当ptr被传递给f，
指针按字节拷贝到param，这样指针本身（ptr）会按值传递给param，根据按值传递参数的类型推导规则，
ptr的常量性将被忽略，param的类型被推导成const char*，也就是一个指向常量字符串的可以被修改的指针。
ptr指向的内容的常量性在类型推导中被保留了，但是ptr自身的常量性被忽略了，因为当拷贝到param时，
产生了新的指针。


数组参数：
template<typename T>
void f(T param); // template with by-value parameter

f(name); // what types are deduced for T and param?

我们开始先假设没有函数的参数可以使用数组。是的，是的，这的确是合法的，
void myFunc(int param[]);

但是数组的声明会被当作指针声明，这意味着myFunc函数可以同样如下声明：

void myFunc(int* param); // same function as above

因为数组参数的声明被当作是指针参数，所以通过传值传递给函数模板的数组会被推导为一个指针类型。
这意味着在调用函数模板f中，其参数类型T会被推导成const char* :

f(name); // name is array, but T deduced as const char*

但是有个意外出现了。尽管函数不能声明真正的数组作为参数，但能声明数组的引用作为参数！
所以我们如果把模板f改成接收引用，

template<typename T>
void f(T& param); // template with by-reference parameter

然后我们再传递一个数组给它，

f(name); // pass array to f

T的类型推导就会是一个实际的数组类型！这个类型会包含数组的大小，所以在这个例子里，
T会被推导成const char[13]，f的参数的类型（这个数组的引用）就是const char(&)[13]。
语法很变态，但理解它会使你比那些不了解的人增分不少。
 
有趣的是，声明数组引用的能力可以创建一个模板，推导其数组包含元素的个数：

// return size of an array as a compile-time constant. (The
// array parameter has no name, because we care only about
// the number of elements it contains.)
template<typename T, std::size_t N>                            // see info
constexpr std::size_t arraySize(T (&)[N]) noexcept       // below on
{                                                             // constexpr

    return N;                                                                    // and
} 

函数参数：

C++中数组不是唯一退化成指针的东西，函数类型也可以退化成函数指针，
void someFunc(int, double);    // someFunc is a function;
                                                // type is void(int, double)
template<typename T>
  void f1(T param);                  // in f1, param passed by value

template<typename T>
  void f2(T& param);               // in f2, param passed by ref

f1(someFunc);                      // param deduced as ptr-to-func;
                                   // type is void (*)(int, double)

f2(someFunc);                     // param deduced as ref-to-func;
                                  // type is void (&)(int, double)
实际上两者几乎没有区别，一旦你了解了从数组到指针的退化，你也会理解函数到指针的退化。


Things to Remember:
1.在模板类型推导过程中，实参的引用类型会被忽略
2.当为统一引用形参做类型推导时，左值实参会被特殊对待
3.当为传值形参做类型推导时，const、volatile都会被忽略
4.在模板类型推导过程中，数组类型和函数名称类型的实参会退化成指针，除非它们被用做初始化引用。


/////////////////////////////////////////////////////////////////////////////////////////

Item 2：Understand auto type deduction

auto类型推导基本和模板类型推导一样。

例如：
template<typename T>
void f(ParamType param);
and this general call:
f(expr); // call f with some expression

当使用auto声明变量时，auto扮演了模板中的T的角色。变量的类型指示符（type specifier）
扮演着和ParamType一样的角色。


例如：
auto x = 27;

类似于
template<typename T> // conceptual template for
void func_for_x(T param); // deducing x's type
func_for_x(27); // conceptual call: param's
// deduced type is x's type

const auto cx = x;
类似于
template<typename T> // conceptual template for
void func_for_cx(const T param); // deducing cx's type
func_for_cx(x); // conceptual call: param's
// deduced type is cx's type

const auto& rx = x;
类似于
template<typename T> // conceptual template for
void func_for_rx(const T& param); // deducing rx's type
func_for_rx(x); // conceptual call: param's
// deduced type is rx's type

除了一个例外，就是std::initializer_list<>.
So the only real difference between auto and template type deduction is that auto
assumes that a braced initializer represents a std::initializer_list, but template
type deduction doesn’t.

C++14 lambdas may use auto in parameter declarations. However, these uses of
auto employ template type deduction, not auto type deduction.


Things to Remember:
1.auto类型推导通常和模板类型推导一样。但是auto类型推导假定使用{}初始化代表的是
std::initializer_list，而模板类型推导不是。
2.在函数返回值和形参中的auto，使用的是模板类型推导，而不是auto类型推导。


/////////////////////////////////////////////////////////////////////////////////////////

Item 3: Understand decltype

在C++11中，主要使用decltype的场合是作为函数模板的返回值类型，根据参数类型，返回适当的类型
在模板类型推导过程中，初始化表达式的“引用属性”会被忽略。

int x = 0;
x is the name of a variable, so decltype(x) is int. But wrapping the name x in
parentheses―“(x)”―yields an expression more complicated than a name. Being a
name, x is an lvalue, and C++ defines the expression (x) to be an lvalue, too.
decltype((x)) is therefore int&. Putting parentheses around a name can change
the type that decltype reports for it!


decltype(auto) f1()
{
int x = 0;
…
return x; // decltype(x) is int, so f1 returns int
}
decltype(auto) f2()
{
int x = 0;
…
return (x); // decltype((x)) is int&, so f2 returns int&
}

f2()返回一个局部变量的引用！（VS2015对于编译f2会有提示）

Things to Remember:
1.decltype几乎总是在没有修改的前提下返回变量或表达式的类型
2.对于T类型的左值表达式而言，decltype总是返回T&类型
3.C++14支持decltype(auto)，像auto一样，可以从初始化器(initializer)
推导出类型，但是是使用decltype规则进行类型推导


/////////////////////////////////////////////////////////////////////////////////////////

Item 4：Know how to view deduced types


/////////////////////////////////////////////////////////////////////////////////////////

Item 17：Understand special member function generation

在C++98有四个函数，编译器在某些场合会自动生成，这些函数包括：
默认构造函数
析构函数
拷贝构造函数
拷贝赋值操作符

上述两个拷贝操作是独立的。声明一个不会防止编译器产生另外一个。

C++11中新增了两个函数，分别是：
移动构造函数
移动赋值操作符

上述两个移动操作是关联的。声明任意一个都会阻止编译器产生另外一个。
因为声明了任意一个，说明默认的按成员移动(memberwise move)的方式就不再适用，
所以编译器不会再产生另外一个。

显然，显示声明拷贝操作也会阻止编译器产生移动操作。

编译器产生移动操作，只有在以下都为真的情况：
1.在类中没有声明拷贝操作
2.在类中没有声明移动操作
3.在类中没有声明析构函数


在C++11中，声明函数时，使用=default，可满足以上条件。
（如何按成员拷贝(memberwise copy)非静态数据成员能够满足需求）


Things to Remember
? The special member functions are those compilers may generate on their own:
default constructor, destructor, copy operations, and move operations.
? Move operations are generated only for classes lacking explicitly declared
move operations, copy operations, and a destructor.
? The copy constructor is generated only for classes lacking an explicitly
declared copy constructor, and it’s deleted if a move operation is declared.
The copy assignment operator is generated only for classes lacking an explicitly
declared copy assignment operator, and it’s deleted if a move operation is
declared. Generation of the copy operations in classes with an explicitly
declared destructor is deprecated.
? Member function templates never suppress generation of special member
functions.


/////////////////////////////////////////////////////////////////////////////////////////

Item 19: Use std::shared_ptr for shared-ownership resource management

每一个由std::shared_ptr管理的对象都有一个控制块(control block).
控制块包括了"引用计数"、"弱引用计数"和其他一些数据(custom deleter, allocator, etc)
一般不可能在一个函数创建指向某对象的std::shared_ptr时会知道是否有其他的std::shared_ptr已经指向该对象，
所以会用到下面的关于控制块创建的规矩：

1.std::make_shared(见条款21)总是会创建控制块。该函数创建了一个新对象并指向它，
所以当std::make_shared被调用时，当然没有该对象的控制块存在。

2.当一个std::share_ptr是从一个独享所有权的指针（比如std::unique_ptr或者std::auto_ptr）创建时，
会创建控制块。独享所有权的指针不使用控制块，因此被指向的对象也不会有控制块。
（作为构建的一部分，这个std::shared_ptr会认为拥有了被指对象的所有权，因此，独享所有权的指针会被置空）。

3.当std::shared_ptr是通过一个原始指针构造时，它会创建控制块。假如你想通过一个已有控制块的的
对象去构造一个std::shared_ptr,你最好传一个std::shared_ptr或者std::weak_ptr(见条款20)作为构造函数
的参数，而不是原始指针。std::shared_ptr的构造函数接受std::shared_ptr或者std::weak_ptr作为参数时，
并不创建新的控制块，因为它依赖传递进来的智能指针已经指向的控制块。

尽量不要使用原始指针去初始化std::shared_ptr
而是使用make_shared。


Things To Remember
1.std::shared_ptr提供了对共享所有权的任意资源的生命周期的很方便的管理。
2.和std::unique_ptr相比，std::shared_ptr尺寸增加了一倍，同时因为控制块增加了负担，
  并且需要原子操作的引用计数。
3.默认的资源释放是通过delete，但是也支持定制删除器。删除器的类型对std::shared_ptr本身的类型无影响。
4.避免从原始指针变量去构造std::shared_ptr。


/////////////////////////////////////////////////////////////////////////////////////////

Item 20: Use std::weak_ptr for std::shared_ptr - like pointers that can dangle

Things to Remember
? Use std::weak_ptr for std::shared_ptr-like pointers that can dangle.
? Potential use cases for std::weak_ptr include caching, observer lists, and the
prevention of std::shared_ptr cycles.


/////////////////////////////////////////////////////////////////////////////////////////

Item 21: Prefer std::make_unique and std::make_shared to direct use of new.

template<typename T, typename... Ts>
std::unique_ptr<T> make_unique(Ts&&... params)
{
    return std::unique_ptr<T>(new T(std::forward<Ts>(params)...));
}

make分配内存只要一次。而new需要两次，一次是为实例对象，一次是为控制块

Things to Remember
1.相比于直接使用new来说，make函数消除了代码的重复，提升了异常安全性，同时对于std::make_shared
和std::allocate_shared来说，产生的代码更小并且更快
2.不适合使用make函数的场合包括：指定自定义的deleter和需要传入{}初始化器
3.对于std::shared_ptr来说，不建议使用make函数的场景包括：
  a.使用自定义的内存管理的类
  b.内存敏感的系统，大对象，std::weak_ptr的生命期超出相对应的std::shared_ptr


/////////////////////////////////////////////////////////////////////////////////////////

Item 22: When using the Pimpl Idiom, define special member functions in the implementation file.

std::unique_ptr和std::shared_ptr对自定义deleter有着不同的方式。
对于std::unique_ptr来说，deleter是智能指针类型的一部分，这样使得编译器可以产生
更小的运行期数据结构和更快的运行期代码，但是在使用编译器产生的默认函数时（析构、move构造、move赋值），
要求指针指向的类型必须是完整类型。

而对于std::shared_ptr来说，deleter的类型不是智能指针的一部分。

Things to Remember
? The Pimpl Idiom decreases build times by reducing compilation dependencies
between class clients and class implementations.
在类的客户端和实现者之间，pimpl Idiom通过减少编译依赖来减少构建时间

? For std::unique_ptr pImpl pointers, declare special member functions in
the class header, but implement them in the implementation file. Do this even
if the default function implementations are acceptable.
? The above advice applies to std::unique_ptr, but not to std::shared_ptr.


/////////////////////////////////////////////////////////////////////////////////////////

Item 31：Avoid default capture modes.

捕获局部静态成员，不会保存上次的静态值，而是最新的静态值
void addDivisorFilter()
{
	static auto calc1 = computeSomeValue1(); // now static
	static auto calc2 = computeSomeValue2(); // now static
	static auto divisor = // now static
	computeDivisor(calc1, calc2);
	filters.emplace_back(
		[=](int value) // captures nothing!
		{ return value % divisor == 0; } // refers to above static
	);
	++divisor; // modify divisor
}

Things to Remember
? Default by-reference capture can lead to dangling references.
? Default by-value capture is susceptible to dangling pointers (especially this),
and it misleadingly suggests that lambdas are self-contained.


/////////////////////////////////////////////////////////////////////////////////////////

Item 32：Use init capture to move objects into closures.

Things to Remember
? Use C++14’s init capture to move objects into closures.
? In C++11, emulate init capture via hand-written classes or std::bind.


/////////////////////////////////////////////////////////////////////////////////////////

Item 33：Use decltype on auto&& parameters to std::forward them.


/////////////////////////////////////////////////////////////////////////////////////////

Item 35：Prefer task-based programming to thread-based.

在C++并发中，“thread”有3个含义：
1.Hardware threads
2.Software threads
3.std::threads

Things to Remember
? The std::thread API offers no direct way to get return values from asynchronously
run functions, and if those functions throw, the program is terminated.
? Thread-based programming calls for manual management of thread exhaustion,
oversubscription, load balancing, and adaptation to new platforms.
? Task-based programming via std::async with the default launch policy handles
most of these issues for you.


/////////////////////////////////////////////////////////////////////////////////////////

Item 36：Specify std::launch::async if asynchronicity is essential

有两种策略：
1.std::launch::async启动策略是指必须在不同的线程异步执行
2.std::launch::deferred启动策略是指通过std::async的返回值f，在之后的某个时刻通过
调用get或者wait时执行。f推迟执行，直到上述的两个函数被调用。当get或者wait被调用，
f将会同步执行，也就是在调用者线程上阻塞执行，直到f执行完毕。如果get或者wait都没被调用，
那么f将不会被执行


但是默认的既可以是同步，也可以是异步，下面两个async有着同等的意思。

auto fut1 = std::async(f); // run f using
							// default launch
							// policy
auto fut2 = std::async(std::launch::async | // run f either
						std::launch::deferred, // async or
						f); 				// deferred




Things to Remember
? The default launch policy for std::async permits both asynchronous and
synchronous task execution.
? This flexibility leads to uncertainty when accessing thread_locals, implies
that the task may never execute, and affects program logic for timeout-based
wait calls.
? Specify std::launch::async if asynchronous task execution is essential.


/////////////////////////////////////////////////////////////////////////////////////////

Item 37: Make std::threads unjoinable on all paths

不可连接的std::thread对象包括：
? 默认构造(default-constructed)的std::thread。这样的对象因为没有
  需要执行的函数，所以没有相对应的底层执行线程
? 已经被移动过的std::thread对象。移动的结果就是之前对应于std::thread执行的
  底层线程已经对应到不同的std::thread
? 已经被连接(jioned)的std::thread对象。在连接之后，std::thread对象不再对应到底层
  已经结束执行的线程
? 已经被分离(detached)的std::thread对象。detach会将std::thread和相对应的底层执行线程
  切断连接(connection)  


You might wonder why the std::thread destructor behaves this way. It’s because
the two other obvious options are arguably worse. They are:
? An implicit join. In this case, a std::thread’s destructor would wait for its
underlying asynchronous thread of execution to complete. That sounds reasonable,
but it could lead to performance anomalies that would be difficult to track
down. For example, it would be counterintuitive that doWork would wait for its
filter to be applied to all values if conditionsAreSatisfied() had already
returned false.
? An implicit detach. In this case, a std::thread’s destructor would sever the
connection between the std::thread object and its underlying thread of execution.
The underlying thread would continue to run.This sounds no less reasonable than 
the join approach, but the debugging problems it can lead to are
worse. In doWork, for example, goodVals is a local variable that is captured by
reference. It’s also modified inside the lambda (via the call to push_back). Suppose,
then, that while the lambda is running asynchronously, conditionsAreSa
tisfied() returns false. In that case, doWork would return, and its local
variables (including goodVals) would be destroyed. Its stack frame would be
popped, and execution of its thread would continue at doWork’s call site.
Statements following that call site would, at some point, make additional function
calls, and at least one such call would probably end up using some or all of
the memory that had once been occupied by the doWork stack frame. Let’s call
such a function f. While f was running, the lambda that doWork initiated would
still be running asynchronously. That lambda could call push_back on the stack
memory that used to be goodVals but that is now somewhere inside f’s stack
frame. Such a call would modify the memory that used to be goodVals, and that
means that from f’s perspective, the content of memory in its stack frame could
spontaneously change! Imagine the fun you’d have debugging that.

Things to Remember
? 尽可能使std::thread对象不可连接(unjoinable)
? 在析构时连接会导致很难调试的性能异常
? 在析构时连接会导致很难调试的未定义行为
? 将std::thread对象声明在类的数据成员最后

/////////////////////////////////////////////////////////////////////////////////////////

Item 38: Be aware of varying thread handle destructor behavior.

在被调方(std::promise)和调用方(std::future)之间存在一个共享状态(shared state)，用于存放被调方
的结果。
The existence of the shared state is important, because the behavior of a future’s
destructor―the topic of this Item―is determined by the shared state associated with
the future. In particular：
? The destructor for the last future referring to a shared state for a nondeferred
task launched via std::async blocks until the task completes. In
essence, the destructor for such a future does an implicit join on the thread on
which the asynchronously executing task is running.
? The destructor for all other futures simply destroys the future object. For
asynchronously running tasks, this is akin to an implicit detach on the underlying
thread. For deferred tasks for which this is the final future, it means that the
deferred task will never run.


What we’re really dealing with is
a simple “normal” behavior and one lone exception to it.The normal behavior is that
a future’s destructor destroys the future object. That’s it. It doesn’t join with anything,
it doesn’t detach from anything, it doesn’t run anything.It just destroys the
future’s data members. (Well, actually, it does one more thing. It decrements the reference
count inside the shared state that’s manipulated by both the futures referring
to it and the callee’s std::promise. This reference count makes it possible for the
library to know when the shared state can be destroyed.


Things to Remember
? Future destructors normally just destroy the future’s data members.
? The final future referring to a shared state for a non-deferred task launched
via std::async blocks until the task completes.


/////////////////////////////////////////////////////////////////////////////////////////

Item 39: Consider void futures for one-shot event communication.


Things to Remember
? For simple event communication, condvar-based designs require a superfluous
mutex, impose constraints on the relative progress of detecting and reacting
tasks, and require reacting tasks to verify that the event has taken place.
? Designs employing a flag avoid those problems, but are based on polling, not
blocking.
? A condvar and flag can be used together, but the resulting communications
mechanism is somewhat stilted.
? Using std::promises and futures dodges these issues, but the approach uses
heap memory for shared states, and it’s limited to one-shot communication.


/////////////////////////////////////////////////////////////////////////////////////////

Item 40: Use std::atomic for concurrency, volatile for special memory.


Things to Remember
? std::atomic is for data accessed from multiple threads without using
mutexes. It’s a tool for writing concurrent software.
? volatile is for memory where reads and writes should not be optimized
away. It’s a tool for working with special memory.



/////////////////////////////////////////////////////////////////////////////////////////

Note that even though std::move(a) is an rvalue, its evaluation does not create 
a temporary object. This conundrum forced the committee to introduce a third value category. 
Something that can be bound to an rvalue reference, even though it is not an rvalue 
in the traditional sense, is called an xvalue (eXpiring value). The traditional rvalues
 were renamed to prvalues (Pure rvalues).

Both prvalues and xvalues are rvalues. Xvalues and lvalues are both glvalues 
(Generalized lvalues). The relationships are easier to grasp with a diagram:

        expressions
          /     \
         /       \
        /         \
    glvalues   rvalues
      /  \       /  \
     /    \     /    \
    /      \   /      \
lvalues   xvalues   prvalues


So now that we know what lvalues and rvalues are, how is the set of rvalues partitioned 
into xvalues and prvalues? Here's the definition:
An rvalue is an xvalue if it is one of the following:
 A function call where the function's return value is declared as an rvalue reference.
  An example would be std::move(x).
 A cast to an rvalue reference. An example would be static_cast<A&&>(a).
 A member access of an xvalue. Example: (static_cast<A&&>(a)).m_x.
 All other rvalues are prvalues.
We are now in a position to describe how decltype deduces the type of a complex expression.

Let expr be an expression that is not a plain, unparenthesized variable, function parameter, 
or class member access. Let T be the type of expr. If expr is an lvalue, 
then decltype(expr) is T&. If expr is an xvalue, then decltype(expr) is T&&. 
Otherwise, expr is a prvalue, and decltype(expr) is T.


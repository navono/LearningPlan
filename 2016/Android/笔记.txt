GeoQuiz 
In your first app, you will explore the fundamentals of Android projects, activities,
layouts, and explicit intents.

CriminalIntent
The largest app in the book, CriminalIntent lets you keep a record of your colleagues’
lapses around the office. You will learn to use fragments, master-detail interfaces,
list-backed interfaces, menus, the camera, implicit intents, and more.

BeatBox 
Intimidate your foes with this app while you learn more about fragments, media
playback, themes, and drawables.

NerdLauncher Building this custom launcher will give you insight into the intent system and tasks.

PhotoGallery
A Flickr client that downloads and displays photos from Flickr’s public feed, this
app will take you through services, multithreading, accessing web services, and
more.

DragAndDraw 
In this simple drawing app, you will learn about handling touch events and creating
custom views.

Sunset 
In this toy app, you will create a beautiful representation of a sunset over open water
while learning about animations.

Locatr 
This app lets you query Flickr for pictures around your current location and display
them on a map. In it, you will learn how to use location services and maps.


2.应用程序框架
　　开发人员也可以完全访问核心应用程序所使用的API框架。该应用程序的架构设计简化了组件的重用;任何一个应用程序都可以发布它的功能块
    并且任何其它的应用程序都可以使用其所发布的功能块(不过得遵循框架的安全性限制)。同样，该应用程序重用机制也使用户可以方便的替换程序组件。
　　隐藏在每个应用后面的是一系列的服务和系统, 其中包括;
　　* 丰富而又可扩展的视图(Views)，可以用来构建应用程序， 它包括列表(lists)，网格(grids)，文本框(text boxes)，按钮(buttons)， 甚至可嵌入的web浏览器。
　　* 内容提供器(Content Providers)使得应用程序可以访问另一个应用程序的数据(如联系人数据库)， 或者共享它们自己的数据
　　* 资源管理器(Resource Manager)提供 非代码资源的访问，如本地字符串，图形，和布局文件( layout files )。
　　* 通知管理器 (Notification Manager) 使得应用程序可以在状态栏中显示自定义的提示信息。
　　* 活动管理器( Activity Manager) 用来管理应用程序生命周期并提供常用的导航回退功能。

3.系统运行库
　　1)程序库
　　Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。以下是一些核心库：
　　* 系统 C 库 - 一个从 BSD 继承来的标准 C 系统函数库( libc )， 它是专门为基于 embedded linux 的设备定制的。
　　* 媒体库 - 基于 PacketVideo OpenCORE;该库支持多种常用的音频、视频格式回放和录制，同时支持静态图像文件。编码格式包括MPEG4, H.264, MP3, AAC, AMR, JPG, PNG 。
　　* Surface Manager - 对显示子系统的管理，并且为多个应用程序提 供了2D和3D图层的无缝融合。
　　* LibWebCore - 一个最新的web浏览器引擎用，支持Android浏览器和一个可嵌入的web视图。
　　* SGL - 底层的2D图形引擎
　　* 3D libraries - 基于OpenGL ES 1.0 APIs实现;该库可以使用硬件 3D加速(如果可用)或者使用高度优化的3D软加速。
　　* FreeType -位图(bitmap)和矢量(vector)字体显示。
　　* SQLite - 一个对于所有应用程序可用，功能强劲的轻型关系型数据库引擎。
　　2)Android 运行库
　　Android 包括了一个核心库，该核心库提供了JAVA编程语言核心库的大多数功能。
　　每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。Dalvik被设计成一个设备可以同时高效地运行多个虚拟系统。 
    Dalvik虚拟机执行(.dex)的Dalvik可执行文件，该格式文件针对小内存使用做了优化。同时虚拟机是基于寄存器的，所有的类都经由JAVA编译器编译，
	然后通过SDK中 的 "dx" 工具转化成.dex格式由虚拟机执行。
　　Dalvik虚拟机依赖于linux内核的一些功能，比如线程机制和底层内存管理机制。
4.Linux 内核
　　Android 的核心系统服务依赖于 Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。





Screen: Activity  -->  fragments


Building Blocks of Android Application

1.Activities: An activity represents a single screen with user interface
2.Services: Services are no different than the windows services which run in the background and have no interface
3.Broadcast Receivers: It is a component that responds to  system-wide broadcast announcements
4.Content Providers: They acts as mediator between you app and data storage may be on your device or in cloud
5.Intents: asynchronous messages that bind individual components to each other at runtime
6.View
7.ViewGroup
8.Layout 
	LinearLayout 
	RelativeLayout
	ListView 
	GridView 
9.Fragment: A Fragment represents a behavior or a user interface that must always be embedded in an activity.
10.Resources 
11.Manifest: AndroidManifest.xml



Android Studio项目的结构
.idea folder: This folder contains the files that used by Android Studio. Don't touch it.
app folder: This folder contains a lot of files and folders, all of your code and resources is here.
	build folder: It contains the files that build from you code.
	libs folder: If you want to use external .jar library place it here.
	src folder:
		androidTest folder: The unit test code of your application.
		main folder: It is a main work path
			java folder: It contains your application code.
			res folder: It contains your application resources.
			AndroidManifest.xml: Config you Android application here.
	.gitignore: git ignore configuration file If you use git for source control.
	app.iml: Definition of your project structure.
	build.gradle: Config about your project and dependencies here.
	proguard-rules.pro: Need to protect your code? config here.
gradle folder: gradle build system folder.
.gitignore: git ignore configuration If you use git for source control.
build.gradle: Config about your work space here.
gradle.properties: Gradle config file.
gradlew: Executable file used for build the project (UNIX based).
gradlew.bat: Executable file used for build the project (Windows).
HelloWorld.iml: Definition of your project structure.
local.properties: Config your work space property.
settings.gradle: Config gradle that what project that you want to build.



第二章：MVC

////////////////////////////////////////////////////////////////////////////////

第三章：Activity的生命周期
Q：
1.Activity之间如何传递数据，命令等？
通过一个叫Bundle的类。重载onSaveInstanceState，将对应的信息索引值传入到
到Bundle实例中。
在每次onCreate时，可以从savedInstanceState通过索引获取上次的值。
通过Bundle保存和恢复的值只能是基本数据类型。类数据需要实现Serializable或Parcelable
接口。但是通常不建议将类存储到Bundle中。

2.Activity有几种状态，这几种状态都是如何切换的，靠什么去驱动切换？
Non-existetn
Stopped (not visible)
Paused (visible)
Running (visible & in foreground)

Android自己会去将activity销毁，然后在新的方向上根据新的布局创建新的activity。
但是在倒置方向上，貌似GeoQuiz的显示方向还是不对。


activity还存在一种Stashed状态。并且系统会记录activity到activity record对象中。

Home键和Back键存在不同。在运行app过程当中，按下Home键，app并没有实际关闭，而是处于
stopped状态，同时内存也没有被回收。app的内部activity状态会被OS记录，下次恢复app时可以获取上次进入stopped的状态信息。

而Back键导致的app退出会使得OS回收app的内存，那么也就不会保存之前的activity的状态信息了。


////////////////////////////////////////////////////////////////////////////////

第四章：调试Android App
Q：
1.任何设置断点？貌似和VS的不一样，同时也找不到设置断点的地方。
直接在代码行数的左侧点击就可以。貌似没有找到设置断点的快捷键

2.如何查看运行期的数据？
断点断入后，在IDE的下方会显示几个窗口（Debugger），里面有断点调试的一系列操作。

3.如何与模拟器或者物理设备进行调试关联？
可以直接点击运行按钮的右侧，那个虫子按钮，选择设备。


进入断点后，调试的方式大部分和VS相同。


////////////////////////////////////////////////////////////////////////////////

第五章：第二个Activity
Q：
1.多个activity是如何切换的？
通过Indent。创建第二个activity时，可以传入已知的Indent对象以及一些数据给第二个activity(startActivityForResult)。
第二个activity启动后可以获取父activity传来的数据，通过Intent的一些getXXXExtra方法。在结束
子activity时，也可以返回一些数据到父activity，通过Intent的putExtra方法。在父activity中，重载onActivityResult
可以获取子activity的最终的数据。

2.多个activity如何传递数据？
见问题1


第七章：Fragments和Fragment管理器
Q:
1.什么是Fragment？引入Fragment解决什么问题？带来什么好处？

2.如何创建Fragment以及如何管理Fragment？






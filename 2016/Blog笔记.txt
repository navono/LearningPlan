2016.6.26
标题：7 Prerequisites to Become a Software Architect
link：http://ithare.com/7-prerequisites-to-become-a-software-architect/

先决条件-1：受团队成员和管理层的尊重（Being respected BOTH by team members AND management）
先决条件0：有精通的技术或者足够聪明（Having technical expertise / being smart enough）
先决条件1：你想要成员架构师（You should want to do it）
先决条件2：你应该有走出舒适区的意愿（You should be willing to go out of your comfort zone）
先决条件3：你应该有倾听其他人想法的意愿（和能力）（You should be willing (and be able) to listen to the others）
先决条件4：你应该准备好去承认有些人在某些领域比你更精通（You should be ready to admit that people know better than you within their field）
先决条件5：你应该有能力从一些不相干的细节中跳出来（You should be able to isolate yourself from irrelevant details）

2016.7.1
标题：TCP/IP Explained. A Bit
link：http://ithare.com/tcp-ip-explained-a-bit/

在网络中传输的数据都是基于IP数据包（Internet Protocol）。而IP数据包在传输过程中是会丢失的。
UDP与TCP都是基于IP数据包的传输层协议。UDP的数据头相对来说比较简单，在传输过程中也不对数据包的投递进行保证，
也不进行检测。因此是“不可靠”的传输协议。也正是因为这个特性，UDP在延迟方面有很好的表现。同时也将UDP的使用场景局限在：
比起数据丢失来说，数据的延迟更能造成损害的情况。也就是数据丢失不可怕，但是延迟不行！比如VoIP和一些实时传输协议
Real-Time Protocol。

UDP可以进行多播，但就目前而言，这只局限于在内部网里。路由器拒绝将多播的数据包向之外的子网传输。
UDP就延迟来说比较出色，但在纯粹的流量吞吐方面，基于UDP协议还是很难与TCP抗衡。

TCP的可靠性（reliability）
TCP的校验和是16位，也就是说，如果一个数据包随机丢失，那么存在1/65536的概率，这个校验和会和另外一个相同，导致
这个丢失的包检验不到。
这在实际中会有两个影响：
1.永远不要依赖原生的TCP传输的可靠性。如果传输的文件是比较重要的，那么最好是额外的做一些校验工作。比如SHA-1或者其他
的校验机制。实际上SHA-1也不是绝对的可靠，存在1/2的160的丢失概率。但这几乎可以忽略。
如果是用了SSL的TCP，那么我们就可以假设这个传输时可靠的。
2.在一些状态不好的链路中传输大文件时，最好是在一定大小的数据块进行检验。这样不用在出现错误时，导致整个文件被
重新传输，而只要传输相对应的错误数据块就行。

TCP的交互性（interactivity）
TCP不是为交互的通讯而构建的。因此，在时间顺序上的延迟不是个错误，而是一个特性。问题是当你需要交互通讯的时候你要
做些什么？

TCP提供了一些提供交互性的办法，比如TCP_NODELAY。但是有一点需要注意，TCP_NODELAY在每个平台的表现都不一样，这个需要
在针对的平台进行测试。

开启TCP_NODELAY的一个特性就是，调用那个send会立即将数据进行传输。而在TCP_NODELAY关闭的情况下，会在缓冲区满的情况下
才进行传输，这也就是Nagle算法的目的。如果开启了TCP_NODELAY，如果一次传输1个字节，那么就会有额外的40个字节的开销
（数据头），这也就要求开发者自己组装发送的数据。

另外一个问题就是链路的状态，也就是挂起（hang）状态。TCP没有提供一个检测链路是否挂起的机制。就拿浏览器而言，很多
时候会一直在转圈，页面也一直没有显示出来。这很可能是有些数据正在重传，从而导致了一些延时。如上面所说，这是TCP的
一个特性，但是在用户角度来看，却无法接受这样的延迟。
同时，TCP的重发时间是双倍的RTT，这也是一个需要关注的点。TCP提供了一个心跳机制来检测链路的状况。但是效果不是很理想。
在Windows平台上，SO_KEEPALIVE的检测时间是2小时，同时无法编程地设置，只能修改注册表，然后全系统有效。Linux同样也没有
这样的机制。
但是写一个自定义的心跳机制比写一个可靠的UDP协议定制版来说，花的时间还是少的，同时出错的概率也小。


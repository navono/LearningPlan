英文：https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying
中文：http://blog.jobbole.com/89674/
	  http://www.oschina.net/translate/log-what-every-software-engineer-should-know-about-real-time-datas-unifying?lang=chs&#


日志分广义的日志与应用日志。
两者最大的区别是：文本日志意味着主要用来方便人去阅读，而构建我所说的『日志（journal）』
或者『数据日志（data logs）』是用于程序的访问。

日志记录的次序（ordering）定义了『时间』概念，因为位于左边的日志记录表示比右边的要早。 
日志记录编号可以看作是这条日志记录的『时间戳』。 把次序直接看成是时间概念，刚开始你会觉得有点怪异，
但是这样的做法有个便利的性质：解耦了 时间 和 任一特定的物理时钟（physical clock）。


日志提供的功能：生成持久化的可重放的历史记录。


数据库中的日志


分布式系统的日志
两种广播方式：
1. State-Machine Replication（active replication）
 维护一个全局的有序的写请求队列（Log），每个副本处理队列中的请求。
2. Primary-Backup Replication
 选举出一个server作为Leader，Leader以请求到达的顺序处理请求，然后将处理的状态的变化
 输出到Log。其他的副本按顺序处理Leader产生的状态变化Log。


状态机复制原理（State Machine Replication Principle）
如果两个相同的、确定性的进程从同一状态开始，并且以相同的顺序获得相同的输入，
那么这两个进程将会生成相同的输出，并且结束在相同的状态。

确定性（deterministic）意味着处理过程是与时间无关的，而且不让任何其他『带外数据（out of band）』
的输入影响处理结果。 例如，如果一个程序的输出会受到线程执行的具体顺序影响，
或者受到getTimeOfDay调用、或者其他一些非重复性事件的影响，那么这样的程序一般被认为是非确定性的。

进程 状态 是进程保存在机器上的任何数据，在进程处理结束的时候，这些数据要么保存在内存里，
要么保存在磁盘上。

对日志用法不同群体有不同的说法。数据库工作者通常说成物理日志（physical logging）和逻辑日志（logical logging）。
物理日志是指记录每一行被改变的内容。
逻辑日志记录的不是改变的行而是那些引起行的内容改变的SQL语句（insert、update和delete语句）。

分布式系统文献通常把处理和复制（processing and replication）方案宽泛地分成两种。
『状态机器模型』常常被称为主-主模型（active-active model）， 记录输入请求的日志，
各个复本处理每个请求。 对这个模型做了细微的调整称为『主备模型』（primary-backup model），
即选出一个副本做为leader，让leader按请求到达的顺序处理请求，并输出它请求处理的状态变化日志。 
其他的副本按照顺序应用leader的状态变化日志，保持和leader同步并能够在leader失败的时候接替它成为leader。


变更日志：表（tables）与事件（Events）的二象性（duality）
日志类似借贷清单和银行处理流水，而数据库表则是当前账户的余额。如果有变更日志，你就可以应用这些变更
生成数据表并得到当前状态。 表记录的是每条数据的最后状态（日志的一个特定时间点）。 可以认识到日志是
更基本的数据结构：日志除了可用来创建原表，也可以用来创建各类衍生表。 （是的，表可以是非关系型用户用的
键值数据存储（keyed data store）。）

表支持了静态数据，而日志记录了变更。日志的魅力就在于它是变更的完整记录，它不仅仅包含了表的最终版本的内容， 
而且可以用于重建任何存在过其它版本。事实上，日志可以看作是表每个历史状态的一系列备份。






从以下三个方面来阐述日志作为单独服务来实现的场景。
数据集成（Data Integration） —— 让组织中所有存储和处理系统可以容易地访问组织所有的数据。
实时数据处理 —— 计算生成的数据流。
分布式系统设计 —— 如何通过集中式日志的设计来简化实际应用系统。


数据集成 是指 使一个组织的所有数据 对 这个组织的所有的服务和系统 可用。
ETL是Extraction-Transformation-Loading的缩写，即数据提取、转换和加载。

对数据的高效使用遵循一种马斯洛的需要层次理论。 金字塔的基础部分包含捕获所有相关数据，
能够将它们全部放到适当的处理环境中（可以是一个华丽的实时查询系统，或仅仅是文本文件和python脚本构成的环境）。 
这些数据需要以统一的方式建模，以方便读取和处理。 一旦这些以统一的方式捕获数据的基本需求得到满足，
那么在基础设施上以不同方法处理这些数据就变得理所当然 —— MapReduce、实时查询系统等等。

构建可靠的、完整的数据流



https://blog.acolyer.org/2015/03/01/cant-we-all-just-agree/

zookeeper

分布式系统中的一致性：
在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，
那么他们最后能得到一个一致的状态。

目的：
1.最终一致性：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper最重要的性能。
2 .可靠性：具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受。
3 .实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。
但由于网络延时等原因，
Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。
4 .等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。
5.原子性：更新只能成功或者失败，没有中间状态。
6 .顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a
都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面


为了保证状态的一致性，Zookeeper提出了两个安全属性（Safety Property）
全序（Total order）：如果消息a在消息b之前发送，则所有Server应该看到相同的结果
因果顺序（Causal order）：如果消息a在消息b之前发生（a导致了b），并被一起发送，则a始终在b之前被执行。


角色：
Leader（主）
  负责进行投票的发起和决议，更新系统状态。具体包括：
   1. 恢复数据
   2. 维持与Leaener的心跳，接收Learner请求并判断Learner的请求消息类型
   3. Learner的消息类型主要有PING消息，REQUERST消息，ACK消息，REVALIDATE消息
   PING消息是指Learner的心跳信息；
   REQUEST消息是Follower发送的提议信息，包括写请求及同步请求；
   ACK消息是Follower的对提议的回复，超过半数的Follower通过，则commit该提议；
   REVALIDATE消息是用来延长SESSION有效时间。
Learner
  Follower（跟随者）
    用于接收客户端请求，并向客户端返回结果，在选主过程中参与投票。具体包括：
	 1. 向Leader发送请求（PING消息、REQUEST消息、ACK消息、REVALIDATE消息）
	 2. 接收Leader消息并进行处理
	 3. 接收Client的请求。如果为写请求，发送给Leader进行投票
	 4. 返回Client结果
	Follower的消息循环处理如下几种来自Leader的消息：
	 1. PING消息：心跳消息
	 2. PROPOSAL消息：Leader发起的提案，要求Follower投票
	 3. COMMIT消息：服务器端最新一次提案的消息
	 4. UPDATE消息：表明同步完成
	 5. REVALIDATE消息：根据Leader的REVALIDATE结果，关闭待revalidate的session还是允许其接受消息
	 6. SYNC消息：返回SYNC结果到客户端，这个消息最初由客户端发起，用来强制得到最新的更新
  Observer（观察者）
    可以接受客户端的连接，将写请求转发给Leader节点。但是不参与投票过程，只同步Leader的状态。
	目的是为了扩展系统，提高读取速度
（以上均为Server端  ）

Client
  请求发起方


每个server在工作工程中有三种状态：
LOOKING：当前server不知道leader是谁，正在搜寻
LEADING：当前server即为选举出来的leader
FOLLOWING：leader已经选举出来，当前server与之同步



ZAB协议（zookeeper atomic broadcast）
包括两种模式。
recover模式（选主）
broadcast模式（同步）
当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步
以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。

ZAB协议定义了 选举（election）、发现（discovery）、同步（sync）、广播(Broadcast) 四个阶段。
ZAB选举（election）时当Follower存在ZXID（事务ID）时判断所有Follower节点的事务日志，
只有lastZXID的节点才有资格成为Leader，这种情况下选举出来的Leader总有最新的事务日志，
基于这个原因所以ZooKeeper实现的时候把 发现（discovery）与同步（sync）合并为恢复（recovery） 阶段

1. Election ：在Looking状态中选举出Leader节点，Leader的lastZXID总是最新的；
2. Discovery ：Follower节点向准Leader推送FOllOWERINFO，该信息中包含了上一周期的epoch，
	接受准Leader的NEWLEADER指令，检查newEpoch有效性，准Leader要确保Follower的epoch与ZXID小于或等于自身的；
3. sync ：将Follower与Leader的数据进行同步，由Leader发起同步指令，最总保持集群数据的一致性；
4. Broadcast ：Leader广播Proposal与Commit，Follower接受Proposal与Commit；
5. Recovery ：在Election阶段选举出Leader后本阶段主要工作就是进行数据的同步，使Leader具有highestZXID，
	集群保持数据的一致性；

选举（Election）
election阶段必须确保选出的Leader具有highest ZXID，否则在Recovery阶段没法保证数据的一致性，
Recovery阶段Leader要求Follower向自己同步数据没有Follower要求Leader保持数据同步，
所有选举出来的Leader要具有最新的ZXID；
在选举的过程中会对每个Follower节点的ZXID进行对比只有highestZXID的Follower才可能当选Leader；

选举流程：
1. 每个Follower都向其他节点发送选自身为Leader的Vote投票请求，等待回复；
2. Follower接收到的Vote如果比自身的大（ZXID更新）时则投票，并更新自身的Vote，否则拒绝投票；
3. 每个Follower中维护着一个投票记录表，当某个节点收到过半的投票时，结束投票并把该Follower选为Leader，投票结束；

每个提交的提议都有个递增的64位的id号，叫zxid，高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，
它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。
当新选举出一个Leader节点时，Leader会取出本地日志中最大事务Proposal的ZXID解析出对应的epoch把该值加1作为新的epoch，
将低32位从0开始生成新的ZXID；ZAB使用epoch来区分不同的Leader周期。




恢复（Recovery）
在election阶段选举出来的Leader已经具有最新的ZXID，所有本阶段的主要工作是根据Leader的事务日志对Follower节点数据进行更新；
Leader：Leader生成新的ZXID与epoch，接收Follower发送过来的FOllOWERINFO（含有当前节点的LastZXID）然后往Follower
发送NEWLEADER；Leader根据Follower发送过来的LastZXID根据数据更新策略向Follower发送更新指令；

同步策略：
1. SNAP ：如果Follower数据太老，Leader将发送快照SNAP指令给Follower同步数据；
2. DIFF ：Leader发送从Follolwer.lastZXID到Leader.lastZXID议案的DIFF指令给Follower同步数据；
3. TRUNC ：当Follower.lastZXID比Leader.lastZXID大时，Leader发送从Leader.lastZXID到Follower.lastZXID的
	TRUNC指令让Follower丢弃该段数据；

Follower：往Leader发送FOLLOERINFO指令，Leader拒绝就转到Election阶段；接收Leader的NEWLEADER指令，
如果该指令中epoch比当前Follower的epoch小那么Follower转到Election阶段；Follower还有主要工作是接收
SNAP/DIFF/TRUNC指令同步数据与ZXID，同步成功后回复ACKNETLEADER，然后进入下一阶段；
Follower将所有事务都同步完成后Leader会把该节点添加到可用Follower列表中；

SNAP与DIFF用于保证集群中Follower节点已经Committed的数据的一致性，TRUNC用于抛弃已经被处理但是没有Committed的数据；
	


	
广播(Broadcast)
客户端提交事务请求时Leader节点为每一个请求生成一个事务Proposal，将其发送给集群中所有的Follower节点，
收到过半Follower的反馈后开始对事务进行提交，ZAB协议使用了原子广播协议；在ZAB协议中只需要得到过半的Follower节点
反馈Ack就可以对事务进行提交，这也导致了Leader几点崩溃后可能会出现数据不一致的情况，ZAB使用了崩溃恢复来处理数字
不一致问题；消息广播使用了TCP协议进行通讯所有保证了接受和发送事务的顺序性。广播消息时Leader节点为每个事务
Proposal分配一个全局递增的ZXID（事务ID），每个事务Proposal都按照ZXID顺序来处理；

Leader节点为每一个Follower节点分配一个队列按事务ZXID顺序放入到队列中，且根据队列的规则FIFO来进行事务的发送。
Follower节点收到事务Proposal后会将该事务以事务日志方式写入到本地磁盘中，成功后反馈Ack消息给Leader节点，
Leader在接收到过半Follower节点的Ack反馈后就会进行事务的提交，以此同时向所有的Follower节点广播Commit消息，
Follower节点收到Commit后开始对事务进行提交；
	
recover模式：
basic paxos
fast paxos

同步模式：
1. leader等待server连接；
2. Follower连接leader，将最大的zxid发送给leader；
3. Leader根据follower的zxid确定同步点；
4. 完成同步后通知follower 已经成为uptodate状态；
5. Follower收到uptodate消息后，又可以重新接受client的请求进行服务了。


应用场景：
1. 命名服务。
2. 配置管理。客户端监视某个配置节点，配置节点发生变化后，通知所有的客户端。
3. 集群管理。同样通知监视某个节点，机器的入和删除都发生在节点下。
4. 分布式锁。
    锁服务可以分为两类，一个是保持独占，另一个是控制时序。
	对于第一类，我们将zookeeper上的一个znode看作是一把锁，通过createznode的方式来实现。
	所有客户端都去创建 /distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。厕所有言：来也冲冲，
	去也冲冲，用完删除掉自己创建的distribute_lock 节点就释放出锁。
	对于第二类， /distribute_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选master一样，
	编号最小的获得锁，用完删除，依次方便。
5. 队列管理
	两种类型的队列：
	1、 同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。
	2、队列按照 FIFO 方式进行入队和出队操作。
	第一类，在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。
	第二类，和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。


	
ZooKeeper所提供的服务主要是通过：数据结构（znode）+ 原语 + watcher机制
原语（基本操作）有：
create。创建znode，父znode必须存在
delete。删除znode，znode没有子节点
exists。测试znode是否存在，并获取它的元数据
getACL/setACL。为znode获取/设置ACL
getChildren。获取znode所有的子节点的列表
getData/setData。获取/设置znode相关的数据
sync。使客户端在znode试图与zookeeper同步



zookeeper的Watch介绍：
所有的读操作（getData,getChildren,exists）都可以设置监视（watch）。监视事件是一次性（one-time）事件，也就是如果
设置的监视事件被触发后，客户端会接收到通知。如果被监视的对象再一次发生改变，那么客户端不会再次收到通知。除非客户端
再次在对象上设置监视。

watch分两类：
1. data watches：getData和exists负责
2. child watched：getChildrend负责

watch事件类型（C 接口）：
ZOO_CREATED_EVENT：节点创建事件，需要watch一个不存在的节点，当节点被创建时触发，此watch通过zoo_exists()设置
ZOO_DELETED_EVENT：节点删除事件，此watch通过zoo_exists()或zoo_get()设置
ZOO_CHANGED_EVENT：节点数据改变事件，此watch通过zoo_exists()或zoo_get()设置
ZOO_CHILD_EVENT：子节点列表改变事件，此watch通过zoo_get_children()或zoo_get_children2()设置
ZOO_SESSION_EVENT：会话失效事件，客户端与服务端断开或重连时触发
ZOO_NOTWATCHING_EVENT：watch移除事件，服务端出于某些原因不再为客户端watch节点时触发

Zookeeper的watch实际上要处理两类事件：
① 连接状态事件(type=None, path=null)
这类事件不需要注册，也不需要我们连续触发，我们只要处理就行了。
② 节点事件
节点的建立，删除，数据的修改。它是one time trigger，我们需要不停的注册触发，还可能发生事件丢失的情况。

上面2类事件都在Watch中处理，也就是重载的process(Event event)
节点事件的触发，通过函数exists，getData或getChildren来处理这类函数，有双重作用：
① 注册触发事件
② 函数本身的功能


znode有四种类型：
1、PERSISTENT-持久化目录节点
	客户端与zookeeper断开连接后，该节点依旧存在
2、 PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点
	客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号
3、EPHEMERAL-临时目录节点
	客户端与zookeeper断开连接后，该节点被删除
4、EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点
	客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号

znode由3部分组成：
1. stat。状态信息，描述该znode的版本，权限等信息
	每个节点维护3个版本号：
	version：节点数据版本号
	cversion：子节点版本号
	aversion：节点所拥有的ACL版本号
2. data。与该znode关联的数据
3. children。该znode下的子节点






集群配置：
(1) initLimit
此配置表示，允许follower(相对于Leaderer言的“客户端”)连接并同步到Leader的初始化连接时间，以tickTime为单位。
当初始化连接时间超过该值，则表示连接失败。

(2) syncLimit

此配置项表示Leader与Follower之间发送消息时，请求和应答时间长度。如果follower在设置时间内不能与leader通信，
那么此follower将会被丢弃。

(3) server.A=B：C：D
A：其中 A 是一个数字，表示这个是服务器的编号；
B：是这个服务器的 ip 地址；
C：Leader选举的端口；
D：Zookeeper服务器之间的通信端口。

(4) myid和zoo.cfg
除了修改 zoo.cfg 配置文件，集群模式下还要配置一个文件 myid，这个文件在 dataDir 目录下，这个文件里面就有一个
数据就是 A 的值，Zookeeper 启动时会读取这个文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是
那个 server。


tickTime ：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime时间就会发送一个心跳；
dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里；
clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。





客户端连接Zookeeper服务：
zkCli.sh -server 127.0.0.1:2181

查看哪个节点被选作Leader或者Follower
echo stat|nc 127.0.0.1 2181

测试是否启动了该Server，若回复imok表示已经启动
echo ruok|nc 127.0.0.1 2181


上述的ruok属于Zookeeper的四字命令，其他的四字命令还有：
conf	输出相关服务配置的详细信息
cons	列出所有连接到服务器的客户端的完全的连接/会话的详细信息。包括“接收/发送”的包数量、会话ID、操作延迟等
dump	列出未经处理的会话和临时节点
envi	输出关于服务环境的详细信息（区别于conf命令）
reqs	列出未经处理的请求
ruok	测试服务是否处于正确状态。如果正常，那么服务返回“imok”，否则无响应
stat	输出关于性能和连接的客户端的列表
wchs	列出服务器watch的详细信息
wchc	通过session列出服务器的watch的详细信息，它的输出是一个与watch相关的会话的列表
wchp	通过路径列出服务器watch的详细信息。它输出一个与session相关的路径






http://mvnrepository.com/



